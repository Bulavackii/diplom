<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Подключение к очереди по умолчанию
    |--------------------------------------------------------------------------
    |
    | Очереди Laravel поддерживают различные бэкенды через единый API,
    | что позволяет вам легко переключаться между различными сервисами
    | для работы с задачами в очередях. Здесь указывается подключение
    | по умолчанию для использования с очередями.
    |
    */
    'default' => env('QUEUE_CONNECTION', 'database'), // Подключение к очереди по умолчанию (использует 'database')

    /*
    |--------------------------------------------------------------------------
    | Подключения к очередям
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете настроить подключения ко всем сервисам для работы
    | с очередями. Пример конфигурации приведен для каждого поддерживаемого
    | драйвера. Вы также можете добавить свои подключения.
    |
    | Поддерживаемые драйверы: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */
    'connections' => [

        // Синхронное выполнение задач (без очередей)
        'sync' => [
            'driver' => 'sync',
        ],

        // Очереди на основе базы данных
        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'), // Подключение к базе данных
            'table' => env('DB_QUEUE_TABLE', 'jobs'),  // Таблица для задач
            'queue' => env('DB_QUEUE', 'default'),     // Название очереди
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90), // Время ожидания перед повтором задачи
            'after_commit' => false, // Выполнять задачи только после фиксации транзакции
        ],

        // Beanstalkd — очередь сообщений
        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'), // Хост для подключения
            'queue' => env('BEANSTALKD_QUEUE', 'default'), // Очередь для задач
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90), // Время повторного выполнения
            'block_for' => 0, // Время ожидания новых задач
            'after_commit' => false,
        ],

        // Amazon SQS
        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),       // Ключ доступа AWS
            'secret' => env('AWS_SECRET_ACCESS_KEY'), // Секретный ключ AWS
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'), // Префикс для очереди
            'queue' => env('SQS_QUEUE', 'default'),  // Название очереди
            'suffix' => env('SQS_SUFFIX'),           // Суффикс для очереди (если есть)
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'), // Регион AWS
            'after_commit' => false,
        ],

        // Redis
        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'), // Подключение к Redis
            'queue' => env('REDIS_QUEUE', 'default'), // Очередь для задач
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90), // Время повторного выполнения
            'block_for' => null, // Ожидание получения новых задач
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Пакетное выполнение задач
    |--------------------------------------------------------------------------
    |
    | Эти параметры определяют базу данных и таблицу, используемые для хранения
    | информации о пакетном выполнении задач. Вы можете обновить эти параметры
    | в зависимости от подключений к базе данных, определенных в приложении.
    |
    */
    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'), // Подключение к базе данных для пакетных задач
        'table' => 'job_batches', // Таблица для хранения информации о пакетах задач
    ],

    /*
    |--------------------------------------------------------------------------
    | Задачи, завершившиеся с ошибкой
    |--------------------------------------------------------------------------
    |
    | Эти параметры определяют поведение при логировании задач, завершившихся
    | с ошибкой, чтобы контролировать, где и как они будут сохраняться.
    | Laravel поддерживает сохранение таких задач в файл или базу данных.
    |
    | Поддерживаемые драйверы: "database-uuids", "dynamodb", "file", "null"
    |
    */
    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'), // Драйвер для обработки неудачных задач
        'database' => env('DB_CONNECTION', 'sqlite'), // Подключение к базе данных для хранения неудачных задач
        'table' => 'failed_jobs', // Таблица для хранения задач, завершившихся с ошибкой
    ],

];
