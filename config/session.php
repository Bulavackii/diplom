<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Драйвер сессий по умолчанию
    |--------------------------------------------------------------------------
    |
    | Этот параметр определяет драйвер сессий, который используется по умолчанию
    | для входящих запросов. Laravel поддерживает различные хранилища для
    | сохранения данных сессий. База данных является хорошим выбором по умолчанию.
    |
    | Поддерживаемые драйверы: "file", "cookie", "database", "apc",
    |                          "memcached", "redis", "dynamodb", "array"
    |
    */
    'driver' => env('SESSION_DRIVER', 'file'), // Драйвер сессий по умолчанию (используется 'file')

    /*
    |--------------------------------------------------------------------------
    | Время жизни сессии
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете указать количество минут, в течение которых сессия будет
    | активной до её истечения. Если вы хотите, чтобы сессия завершалась при
    | закрытии браузера, укажите это через параметр 'expire_on_close'.
    |
    */
    'lifetime' => env('SESSION_LIFETIME', 120), // Время жизни сессии в минутах
    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false), // Закрывать сессию при закрытии браузера

    /*
    |--------------------------------------------------------------------------
    | Шифрование сессий
    |--------------------------------------------------------------------------
    |
    | Эта опция позволяет включить шифрование данных сессии перед их сохранением.
    | Laravel автоматически зашифрует и расшифрует данные сессии, если эта
    | опция включена.
    |
    */
    'encrypt' => env('SESSION_ENCRYPT', false), // Включить шифрование сессий (по умолчанию отключено)

    /*
    |--------------------------------------------------------------------------
    | Путь для хранения файлов сессий
    |--------------------------------------------------------------------------
    |
    | При использовании драйвера "file" для сессий файлы сессий будут сохраняться
    | на диске. Здесь можно указать путь для хранения этих файлов.
    |
    */
    'files' => storage_path('framework/sessions'), // Путь для файлов сессий

    /*
    |--------------------------------------------------------------------------
    | Подключение к базе данных для сессий
    |--------------------------------------------------------------------------
    |
    | При использовании драйверов "database" или "redis" для сессий, можно указать
    | подключение к базе данных, которое будет использоваться для управления сессиями.
    |
    */
    'connection' => env('SESSION_CONNECTION'), // Подключение к базе данных для сессий

    /*
    |--------------------------------------------------------------------------
    | Таблица для сессий в базе данных
    |--------------------------------------------------------------------------
    |
    | При использовании драйвера "database" вы можете указать таблицу, в которой
    | будут храниться данные сессий. По умолчанию используется таблица 'sessions'.
    |
    */
    'table' => env('SESSION_TABLE', 'sessions'), // Таблица для хранения сессий в базе данных

    /*
    |--------------------------------------------------------------------------
    | Хранилище кеша для сессий
    |--------------------------------------------------------------------------
    |
    | Если используется один из драйверов сессий, основанных на кеше, вы можете
    | указать хранилище кеша, которое будет использоваться для хранения данных сессий.
    | Это должно соответствовать одному из определенных хранилищ кеша.
    |
    | Поддерживается для драйверов: "apc", "dynamodb", "memcached", "redis"
    |
    */
    'store' => env('SESSION_STORE'), // Хранилище кеша для сессий

    /*
    |--------------------------------------------------------------------------
    | Вероятность очистки старых сессий
    |--------------------------------------------------------------------------
    |
    | Некоторые драйверы сессий требуют периодической очистки старых сессий.
    | Этот параметр определяет вероятность того, что такая очистка произойдет
    | при каждом запросе. По умолчанию, вероятность равна 2 из 100.
    |
    */
    'lottery' => [2, 100], // Вероятность очистки старых сессий (2%)

    /*
    |--------------------------------------------------------------------------
    | Имя cookie для сессий
    |--------------------------------------------------------------------------
    |
    | Здесь вы можете изменить имя cookie для сессий. Обычно это не требуется
    | делать, так как изменение имени cookie не улучшает безопасность.
    |
    */
    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ), // Имя cookie для сессий

    /*
    |--------------------------------------------------------------------------
    | Путь для cookie сессий
    |--------------------------------------------------------------------------
    |
    | Путь для cookie сессий определяет область действия cookie. Обычно это корень
    | приложения, но вы можете изменить этот параметр при необходимости.
    |
    */
    'path' => env('SESSION_PATH', '/'), // Путь для cookie сессий

    /*
    |--------------------------------------------------------------------------
    | Домен для cookie сессий
    |--------------------------------------------------------------------------
    |
    | Это значение определяет домен и поддомены, для которых cookie сессий будет
    | доступно. Обычно это корневой домен и все поддомены.
    |
    */
    'domain' => env('SESSION_DOMAIN'), // Домен для cookie сессий

    /*
    |--------------------------------------------------------------------------
    | Cookie только для HTTPS
    |--------------------------------------------------------------------------
    |
    | Если установить этот параметр в true, cookie сессий будут отправляться только
    | через HTTPS-соединения. Это помогает защитить cookie от перехвата в
    | незащищенных HTTP-соединениях.
    |
    */
    'secure' => env('SESSION_SECURE_COOKIE'), // Отправлять cookie только через HTTPS

    /*
    |--------------------------------------------------------------------------
    | Cookie доступные только по HTTP
    |--------------------------------------------------------------------------
    |
    | Если этот параметр включен, cookie сессий будут доступны только через
    | HTTP-запросы и не будут доступны через JavaScript.
    |
    */
    'http_only' => env('SESSION_HTTP_ONLY', true), // Ограничить доступ к cookie через HTTP

    /*
    |--------------------------------------------------------------------------
    | Атрибут Same-Site для cookie
    |--------------------------------------------------------------------------
    |
    | Этот параметр определяет поведение cookie при межсайтовых запросах, что
    | может помочь в предотвращении CSRF-атак. По умолчанию используется значение "lax".
    |
    | Поддерживаемые значения: "lax", "strict", "none", null
    |
    */
    'same_site' => env('SESSION_SAME_SITE', 'lax'), // Атрибут Same-Site для cookie

    /*
    |--------------------------------------------------------------------------
    | Разделенные cookie
    |--------------------------------------------------------------------------
    |
    | Включение этого параметра привяжет cookie к сайту верхнего уровня в контексте
    | кросс-сайтовых запросов. Разделенные cookie принимаются браузерами при
    | установленном флаге "secure" и атрибуте Same-Site, установленном в "none".
    |
    */
    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false), // Включить разделенные cookie

];
